# Project: JKTech Assignment

## Description
This project is a Node.js-based backend application that provides APIs for user management, authentication, role-based access control, and ingestion processing. The system follows a structured approach using Express.js and Sequelize ORM for database interactions.

## Approach Followed
- **Modular Architecture**: The project is organized into routes, controllers, and services for better maintainability.
- **Database Management**: Uses Sequelize ORM to interact with MySQL/PostgreSQL.
- **Middleware Usage**: Includes authentication, validation, and error-handling middleware.
- **API Versioning**: All API endpoints are prefixed with a version identifier (e.g., `/v1`).
- **Authentication**: Implements JWT-based authentication for secure access.

## Architecture Used
- **Backend**: Node.js with Express.js
- **Database**: Sequelize ORM (supports MySQL, PostgreSQL, etc.)
- **Authentication**: JWT-based authentication
- **File Uploads**: Multer (if applicable)
- **Routing Structure**: Organized under the `/routes` directory

## API Endpoints
### Authentication APIs
- `POST /v1/auth/login` - Authenticates a user.
- `POST /v1/auth/signup` - Registers a new user.

### User Management APIs
- `POST /v1/users` - Creates a new user.
- `GET /v1/users` - Retrieves the list of users.

### Role Management APIs
- `GET /v1/roles` - Retrieves the available roles.

### Ingestion APIs
- `POST /v1/ingestion/trigger` - Triggers an ingestion process.
- `GET /v1/ingestion/status` - Fetches the status of ongoing ingestion processes.

## Testing
The project includes test cases written using **Jest and Supertest** to validate API functionality. Tests cover:
1. **Authentication** – Validates login and signup functionality.
2. **User Management** – Ensures users can be created and retrieved.
3. **Role Management** – Verifies role-based access control.
4. **Ingestion API** – Tests ingestion process initiation and status tracking.
5. **General API Handling** – Ensures correct response for invalid routes.

To run tests:
```bash
npm install --save-dev jest supertest
npm test
```

## Setup and Installation
1. Clone the repository:
   ```bash
   git clone <repo-url>
   ```
2. Install dependencies:
   ```bash
   npm install
   ```
3. Run the application:
   ```bash
   npm start
   ```
